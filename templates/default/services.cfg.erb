#Nagios Service Definitions.
#
# Automatically generated by Chef.

define service {
    use                 default-service,graphed-service
    hostgroup_name      Linux
    service_description ping
    check_command       check_ping!200.0,20%!500.0,60%
    #_graphiteprefix     monitoring
    #_graphitepostfix    ping
}

define service {
    service_description Free Space All Disks
    hostgroup_name      Linux
    check_command       check_all_disks
    use                 default-service,graphed-service
}

define service {
    service_description Load Average
    hostgroup_name      Linux
    check_command       check_load
    use                 default-service,graphed-service
}

define service {
    service_description Free Memory
    hostgroup_name      Linux
    check_command       check_mem
    use                 default-service,graphed-service
}

define service {
    service_description SSH
    hostgroup_name      Linux
    check_command       check_ssh
    use                 default-service,graphed-service
}

define service {
    service_description Processes
    hostgroup_name      Linux
    check_command       check_total_procs
    use                 default-service,graphed-service
}

<% unless @service_hosts['load_balancer'].nil? -%>
# basic web server http check
define service {
    service_description Load Balancer HTTP Status on Port 80
    hostgroup_name      load_balancer
    check_command       check_http
    use                 default-service,graphed-service
}

define service {
  service_description	Load Balancer Process
  hostgroup_name	load_balancer
  check_command		check_nrpe!check_proc_apache
  use			default-service,graphed-service
}
<% end -%>

<% unless @service_hosts['apache_server'].nil? -%>
# basic web server http check
define service {
    service_description HTTP Status on Port 80
    hostgroup_name      apache_server
    check_command       check_http
    use                 default-service,graphed-service
}

define service {
    service_description Default URL Status
    hostgroup_name	sites, external_sites
    check_command	check_http_by_name
    use			default-service,graphed-service
}

define service {
  service_description   Apache Process
  hostgroup_name        apache_server
  check_command         check_nrpe!check_proc_apache
  use                   default-service,graphed-service
}

<% end -%>
<% unless @service_hosts['appserver'].nil? -%>
# basic check if appserver role is running unicorn
define service {
    service_description Unicorn Processes
    hostgroup_name      appserver
    check_command       check_nrpe!check_unicorn
    use                 default-service,graphed-service
}

define service {
    service_description Unicorn HTTP
    hostgroup_name      appserver
    check_command       check_http_port_expect!8080!"HTTP/1.1 302 Found"
    use                 default-service,graphed-service
}

<% end -%>
<% unless @service_hosts['database_master'].nil? -%>
# basic check if the database_master role is a mysql server
# database_master service checks
define service {
    service_description MySQL
    hostgroup_name      database_master
    check_command       check_nrpe!check_mysql_server
    use                 default-service,graphed-service
}

<% end -%>
<% unless @service_hosts['chef_server'].nil? -%>
## basic check to see if chef_server role exists on any nodes
# and monitor them
define service {
    service_description	Chef Server API TCP
    hostgroup_name	chef_server
    check_command	check_tcp!4000
    use			default-service,graphed-service
}

define service {
  service_description	Chef Expander
  hostgroup_name	chef_server
  check_command		check_nrpe!check_chef_expander
  use			default-service,graphed-service
}

define service {
  service_description	Chef Server
  hostgroup_name	chef_server
  check_command		check_nrpe!check_chef_server
  use			default-service,graphed-service
}

define service {
  service_description	Chef Server Web UI
  hostgroup_name	chef_server
  check_command		check_nrpe!check_chef_server_webui
  use			default-service,graphed-service
}
<% end -%>

# Services defined by data bags
<% @services.each do |service| -%>
  <% unless @service_hosts[service['hostgroup_name'].nil? && service['hostgroup_name'] != 'all' ] -%>
define service {
  service_description <%= service['id'] %>
  hostgroup_name <%= service['hostgroup_name'] %>
  check_command check_<%= service['id'] %>
  use default-service,graphed-service
}
  <% end -%>
<% end -%>
